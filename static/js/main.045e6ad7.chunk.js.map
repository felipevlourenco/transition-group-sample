{"version":3,"sources":["components/Toolbar/Toolbar.js","components/Item/Item.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","props","useState","itemName","setItemName","className","type","placeholder","value","onChange","event","target","disabled","onClick","onAddHandle","Item","name","onDelete","App","addItemHandler","newItem","id","Date","setState","items","state","concat","removeItemHandler","index","newItems","splice","itemsList","this","map","item","CSSTransition","key","timeout","classNames","TransitionGroup","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAsCeA,G,MAnCC,SAAAC,GAAU,IAAD,EACSC,mBAAS,IADlB,mBAChBC,EADgB,KACNC,EADM,KAevB,OACE,yBAAKC,UAAU,mBACb,2BACEA,UAAU,yBACVC,KAAK,OACLC,YAAY,YACZC,MAAOL,EACPM,SAnBe,SAAAC,GACnB,IAAMF,EAAQE,EAAMC,OAAOH,MAC3BJ,EAAYI,MAmBV,4BACEH,UAAU,0BACVO,UAAWT,EACXU,QAnBmB,WACjBV,IACJF,EAAMa,YAAYX,GAClBC,EAAY,OAaZ,QCXSW,G,MAbF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpB,OACE,yBAAKZ,UAAU,gBACb,2BACEC,KAAK,WACLD,UAAU,sBACVQ,QAASI,IAEX,0BAAMZ,UAAU,yBAAhB,IAA0CW,EAA1C,Q,gBC2CSE,G,kBA/Cb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRkB,eAAiB,SAAAhB,GACf,IAAMiB,EAAU,CACdJ,KAAMb,EACNkB,IAAK,IAAIC,MAEX,EAAKC,SAAS,CACZC,MAAO,EAAKC,MAAMD,MAAME,OAAON,MAbhB,EAiBnBO,kBAAoB,SAAAC,GAClB,IAAMC,EAAQ,YAAO,EAAKJ,MAAMD,OAChCK,EAASC,OAAOF,EAAO,GACvB,EAAKL,SAAS,CAAEC,MAAOK,KAlBvB,EAAKJ,MAAQ,CACXD,MAAO,IAHQ,E,sEAuBT,IAAD,OACDO,EAAYC,KAAKP,MAAMD,MAAMS,KAAI,SAACC,EAAMN,GAAP,OACrC,kBAACO,EAAA,EAAD,CAAeC,IAAKF,EAAKb,GAAIgB,QAAS,IAAKC,WAAW,QACpD,kBAAC,EAAD,CACEF,IAAKF,EAAKb,GACVL,KAAMkB,EAAKlB,KACXC,SAAU,kBAAM,EAAKU,kBAAkBC,UAK7C,OACE,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAASS,YAAakB,KAAKb,iBAC3B,kBAACoB,EAAA,EAAD,CAAiBlC,UAAU,uBACxB0B,S,GAxCKS,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.045e6ad7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Toolbar.css'\n\nconst Toolbar = props => {\n  const [itemName, setItemName] = useState('')\n\n  const handleChange = event => {\n    const value = event.target.value\n    setItemName(value)\n  }\n\n  const addButtonHandler = () => {\n    if (!!itemName) {\n      props.onAddHandle(itemName)\n      setItemName('')\n    }\n  }\n\n  return (\n    <div className=\"toolbar-section\">\n      <input\n        className=\"toolbar-section__input\"\n        type=\"text\"\n        placeholder=\"Item name\"\n        value={itemName}\n        onChange={handleChange}\n      />\n      <button\n        className=\"toolbar-section__button\"\n        disabled={!itemName}\n        onClick={addButtonHandler}\n      >\n        +\n      </button>\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from 'react'\nimport './Item.css'\n\nconst Item = ({ name, onDelete }) => {\n  return (\n    <div className=\"item-section\">\n      <input\n        type=\"checkbox\"\n        className=\"item-section__check\"\n        onClick={onDelete}\n      />\n      <span className=\"item-section__content\"> {name} </span>\n    </div>\n  )\n}\n\nexport default Item\n","import React, { Component } from 'react'\nimport Toolbar from './components/Toolbar/Toolbar'\nimport Item from './components/Item/Item'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: []\n    }\n  }\n\n  addItemHandler = itemName => {\n    const newItem = {\n      name: itemName,\n      id: +new Date()\n    }\n    this.setState({\n      items: this.state.items.concat(newItem)\n    })\n  }\n\n  removeItemHandler = index => {\n    const newItems = [...this.state.items]\n    newItems.splice(index, 1)\n    this.setState({ items: newItems })\n  }\n\n  render() {\n    const itemsList = this.state.items.map((item, index) => (\n      <CSSTransition key={item.id} timeout={500} classNames=\"move\">\n        <Item\n          key={item.id}\n          name={item.name}\n          onDelete={() => this.removeItemHandler(index)}\n        />\n      </CSSTransition>\n    ))\n\n    return (\n      <div className=\"App\">\n        <div className=\"items-section\">\n          <Toolbar onAddHandle={this.addItemHandler} />\n          <TransitionGroup className=\"items-section__list\">\n            {itemsList}\n          </TransitionGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}